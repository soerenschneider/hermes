// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package generated

import (
	"context"
	"time"
)

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE
    id == ?1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteUndeliverableMessage = `-- name: DeleteUndeliverableMessage :exec
DELETE FROM messages
WHERE
    retries > ?1
`

func (q *Queries) DeleteUndeliverableMessage(ctx context.Context, retries int64) error {
	_, err := q.db.ExecContext(ctx, deleteUndeliverableMessage, retries)
	return err
}

const getCount = `-- name: GetCount :one
SELECT
    COUNT(id)
FROM
    messages
`

func (q *Queries) GetCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMessage = `-- name: GetMessage :one

DELETE FROM
    messages
WHERE id = (
    SELECT id
    FROM messages
    WHERE retry_date <= CURRENT_TIMESTAMP
    ORDER BY insertion_date ASC
    LIMIT 1
    )
RETURNING id, subject, message, service_id, insertion_date, retry_date, retries
`

func (q *Queries) GetMessage(ctx context.Context) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.ServiceID,
		&i.InsertionDate,
		&i.RetryDate,
		&i.Retries,
	)
	return i, err
}

const insert = `-- name: Insert :exec
INSERT INTO
    messages (
        subject,
        message,
        service_id,
        retry_date,
        retries
    )
VALUES (?1, ?2, ?3, ?4, ?5)
`

type InsertParams struct {
	Subject   string
	Message   string
	ServiceID string
	RetryDate time.Time
	Retries   int64
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) error {
	_, err := q.db.ExecContext(ctx, insert,
		arg.Subject,
		arg.Message,
		arg.ServiceID,
		arg.RetryDate,
		arg.Retries,
	)
	return err
}
